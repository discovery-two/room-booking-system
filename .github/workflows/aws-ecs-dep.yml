name: Deploy to Amazon ECS

on:
  push:
  pull_request:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  ENV_TYPE: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GHACTION_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: roombook-ecr
        COMMIT_HASH: ${{ github.sha }}
        ENV_TYPE: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
      run: |
        docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${ENV_TYPE}_${COMMIT_HASH} .
        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${ENV_TYPE}_${COMMIT_HASH}
        echo "image=${ECR_REGISTRY}/${ECR_REPOSITORY}:${ENV_TYPE}_${COMMIT_HASH}" >> $GITHUB_OUTPUT

    - name: Replace placeholders in task definition
      run: |
        sed -i 's/EXECUTION_ROLE_ARN_PLACEHOLDER/${{ secrets.ECS_EXECUTION_ROLE_ARN }}/g' .github/workflows/task-definition.json
        sed -i 's/CONTAINER_NAME_PLACEHOLDER/roombook-app-${{ env.ENV_TYPE }}/g' .github/workflows/task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ".github/workflows/task-definition.json"
        container-name: roombook-app-${{ env.ENV_TYPE }}
        image: ${{ steps.build-image.outputs.image }}
        environment-variables: |
          DATABASE_URL=test1
          DATABASE_USERNAME=test2
          DATABASE_PASSWORD=test3

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true
